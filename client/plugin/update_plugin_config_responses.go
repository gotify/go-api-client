// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gotify/go-api-client/v2/models"
)

// UpdatePluginConfigReader is a Reader for the UpdatePluginConfig structure.
type UpdatePluginConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePluginConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdatePluginConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdatePluginConfigBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdatePluginConfigUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdatePluginConfigForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdatePluginConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdatePluginConfigInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdatePluginConfigOK creates a UpdatePluginConfigOK with default headers values
func NewUpdatePluginConfigOK() *UpdatePluginConfigOK {
	return &UpdatePluginConfigOK{}
}

/*UpdatePluginConfigOK handles this case with default header values.

Ok
*/
type UpdatePluginConfigOK struct {
}

func (o *UpdatePluginConfigOK) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/config][%d] updatePluginConfigOK ", 200)
}

func (o *UpdatePluginConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePluginConfigBadRequest creates a UpdatePluginConfigBadRequest with default headers values
func NewUpdatePluginConfigBadRequest() *UpdatePluginConfigBadRequest {
	return &UpdatePluginConfigBadRequest{}
}

/*UpdatePluginConfigBadRequest handles this case with default header values.

Bad Request
*/
type UpdatePluginConfigBadRequest struct {
	Payload *models.Error
}

func (o *UpdatePluginConfigBadRequest) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/config][%d] updatePluginConfigBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePluginConfigBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePluginConfigUnauthorized creates a UpdatePluginConfigUnauthorized with default headers values
func NewUpdatePluginConfigUnauthorized() *UpdatePluginConfigUnauthorized {
	return &UpdatePluginConfigUnauthorized{}
}

/*UpdatePluginConfigUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdatePluginConfigUnauthorized struct {
	Payload *models.Error
}

func (o *UpdatePluginConfigUnauthorized) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/config][%d] updatePluginConfigUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePluginConfigUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePluginConfigForbidden creates a UpdatePluginConfigForbidden with default headers values
func NewUpdatePluginConfigForbidden() *UpdatePluginConfigForbidden {
	return &UpdatePluginConfigForbidden{}
}

/*UpdatePluginConfigForbidden handles this case with default header values.

Forbidden
*/
type UpdatePluginConfigForbidden struct {
	Payload *models.Error
}

func (o *UpdatePluginConfigForbidden) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/config][%d] updatePluginConfigForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePluginConfigForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePluginConfigNotFound creates a UpdatePluginConfigNotFound with default headers values
func NewUpdatePluginConfigNotFound() *UpdatePluginConfigNotFound {
	return &UpdatePluginConfigNotFound{}
}

/*UpdatePluginConfigNotFound handles this case with default header values.

Not Found
*/
type UpdatePluginConfigNotFound struct {
	Payload *models.Error
}

func (o *UpdatePluginConfigNotFound) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/config][%d] updatePluginConfigNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePluginConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePluginConfigInternalServerError creates a UpdatePluginConfigInternalServerError with default headers values
func NewUpdatePluginConfigInternalServerError() *UpdatePluginConfigInternalServerError {
	return &UpdatePluginConfigInternalServerError{}
}

/*UpdatePluginConfigInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdatePluginConfigInternalServerError struct {
	Payload *models.Error
}

func (o *UpdatePluginConfigInternalServerError) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/config][%d] updatePluginConfigInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdatePluginConfigInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
