// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gotify/go-api-client/v2/models"
)

// DisablePluginReader is a Reader for the DisablePlugin structure.
type DisablePluginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisablePluginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDisablePluginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDisablePluginUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDisablePluginForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDisablePluginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDisablePluginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDisablePluginOK creates a DisablePluginOK with default headers values
func NewDisablePluginOK() *DisablePluginOK {
	return &DisablePluginOK{}
}

/*DisablePluginOK handles this case with default header values.

Ok
*/
type DisablePluginOK struct {
}

func (o *DisablePluginOK) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/disable][%d] disablePluginOK ", 200)
}

func (o *DisablePluginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDisablePluginUnauthorized creates a DisablePluginUnauthorized with default headers values
func NewDisablePluginUnauthorized() *DisablePluginUnauthorized {
	return &DisablePluginUnauthorized{}
}

/*DisablePluginUnauthorized handles this case with default header values.

Unauthorized
*/
type DisablePluginUnauthorized struct {
	Payload *models.Error
}

func (o *DisablePluginUnauthorized) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/disable][%d] disablePluginUnauthorized  %+v", 401, o.Payload)
}

func (o *DisablePluginUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisablePluginForbidden creates a DisablePluginForbidden with default headers values
func NewDisablePluginForbidden() *DisablePluginForbidden {
	return &DisablePluginForbidden{}
}

/*DisablePluginForbidden handles this case with default header values.

Forbidden
*/
type DisablePluginForbidden struct {
	Payload *models.Error
}

func (o *DisablePluginForbidden) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/disable][%d] disablePluginForbidden  %+v", 403, o.Payload)
}

func (o *DisablePluginForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisablePluginNotFound creates a DisablePluginNotFound with default headers values
func NewDisablePluginNotFound() *DisablePluginNotFound {
	return &DisablePluginNotFound{}
}

/*DisablePluginNotFound handles this case with default header values.

Not Found
*/
type DisablePluginNotFound struct {
	Payload *models.Error
}

func (o *DisablePluginNotFound) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/disable][%d] disablePluginNotFound  %+v", 404, o.Payload)
}

func (o *DisablePluginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisablePluginInternalServerError creates a DisablePluginInternalServerError with default headers values
func NewDisablePluginInternalServerError() *DisablePluginInternalServerError {
	return &DisablePluginInternalServerError{}
}

/*DisablePluginInternalServerError handles this case with default header values.

Internal Server Error
*/
type DisablePluginInternalServerError struct {
	Payload *models.Error
}

func (o *DisablePluginInternalServerError) Error() string {
	return fmt.Sprintf("[POST /plugin/{id}/disable][%d] disablePluginInternalServerError  %+v", 500, o.Payload)
}

func (o *DisablePluginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
