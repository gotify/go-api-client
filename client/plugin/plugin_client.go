// Code generated by go-swagger; DO NOT EDIT.

package plugin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new plugin API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for plugin API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DisablePlugin disables a plugin
*/
func (a *Client) DisablePlugin(params *DisablePluginParams, authInfo runtime.ClientAuthInfoWriter) (*DisablePluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisablePluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "disablePlugin",
		Method:             "POST",
		PathPattern:        "/plugin/{id}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DisablePluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DisablePluginOK), nil

}

/*
EnablePlugin enables a plugin
*/
func (a *Client) EnablePlugin(params *EnablePluginParams, authInfo runtime.ClientAuthInfoWriter) (*EnablePluginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnablePluginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enablePlugin",
		Method:             "POST",
		PathPattern:        "/plugin/{id}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EnablePluginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnablePluginOK), nil

}

/*
GetPluginConfig gets y a m l configuration for configurer plugin
*/
func (a *Client) GetPluginConfig(params *GetPluginConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginConfig",
		Method:             "GET",
		PathPattern:        "/plugin/{id}/config",
		ProducesMediaTypes: []string{"application/x-yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPluginConfigOK), nil

}

/*
GetPluginDisplay gets display info for a displayer plugin
*/
func (a *Client) GetPluginDisplay(params *GetPluginDisplayParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginDisplayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginDisplayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPluginDisplay",
		Method:             "GET",
		PathPattern:        "/plugin/{id}/display",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginDisplayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPluginDisplayOK), nil

}

/*
GetPlugins returns all plugins
*/
func (a *Client) GetPlugins(params *GetPluginsParams, authInfo runtime.ClientAuthInfoWriter) (*GetPluginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPluginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlugins",
		Method:             "GET",
		PathPattern:        "/plugin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPluginsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPluginsOK), nil

}

/*
UpdatePluginConfig updates y a m l configuration for configurer plugin
*/
func (a *Client) UpdatePluginConfig(params *UpdatePluginConfigParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePluginConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePluginConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePluginConfig",
		Method:             "POST",
		PathPattern:        "/plugin/{id}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-yaml"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePluginConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePluginConfigOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
