// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gotify/go-api-client/v2/models"
)

// StreamMessagesReader is a Reader for the StreamMessages structure.
type StreamMessagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StreamMessagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewStreamMessagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewStreamMessagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewStreamMessagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewStreamMessagesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewStreamMessagesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStreamMessagesOK creates a StreamMessagesOK with default headers values
func NewStreamMessagesOK() *StreamMessagesOK {
	return &StreamMessagesOK{}
}

/*StreamMessagesOK handles this case with default header values.

Ok
*/
type StreamMessagesOK struct {
	Payload *models.MessageExternal
}

func (o *StreamMessagesOK) Error() string {
	return fmt.Sprintf("[GET /stream][%d] streamMessagesOK  %+v", 200, o.Payload)
}

func (o *StreamMessagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MessageExternal)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamMessagesBadRequest creates a StreamMessagesBadRequest with default headers values
func NewStreamMessagesBadRequest() *StreamMessagesBadRequest {
	return &StreamMessagesBadRequest{}
}

/*StreamMessagesBadRequest handles this case with default header values.

Bad Request
*/
type StreamMessagesBadRequest struct {
	Payload *models.Error
}

func (o *StreamMessagesBadRequest) Error() string {
	return fmt.Sprintf("[GET /stream][%d] streamMessagesBadRequest  %+v", 400, o.Payload)
}

func (o *StreamMessagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamMessagesUnauthorized creates a StreamMessagesUnauthorized with default headers values
func NewStreamMessagesUnauthorized() *StreamMessagesUnauthorized {
	return &StreamMessagesUnauthorized{}
}

/*StreamMessagesUnauthorized handles this case with default header values.

Unauthorized
*/
type StreamMessagesUnauthorized struct {
	Payload *models.Error
}

func (o *StreamMessagesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /stream][%d] streamMessagesUnauthorized  %+v", 401, o.Payload)
}

func (o *StreamMessagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamMessagesForbidden creates a StreamMessagesForbidden with default headers values
func NewStreamMessagesForbidden() *StreamMessagesForbidden {
	return &StreamMessagesForbidden{}
}

/*StreamMessagesForbidden handles this case with default header values.

Forbidden
*/
type StreamMessagesForbidden struct {
	Payload *models.Error
}

func (o *StreamMessagesForbidden) Error() string {
	return fmt.Sprintf("[GET /stream][%d] streamMessagesForbidden  %+v", 403, o.Payload)
}

func (o *StreamMessagesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStreamMessagesInternalServerError creates a StreamMessagesInternalServerError with default headers values
func NewStreamMessagesInternalServerError() *StreamMessagesInternalServerError {
	return &StreamMessagesInternalServerError{}
}

/*StreamMessagesInternalServerError handles this case with default header values.

Server Error
*/
type StreamMessagesInternalServerError struct {
	Payload *models.Error
}

func (o *StreamMessagesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /stream][%d] streamMessagesInternalServerError  %+v", 500, o.Payload)
}

func (o *StreamMessagesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
