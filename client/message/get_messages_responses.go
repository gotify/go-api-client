// Code generated by go-swagger; DO NOT EDIT.

package message

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gotify/go-api-client/v2/models"
)

// GetMessagesReader is a Reader for the GetMessages structure.
type GetMessagesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMessagesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetMessagesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetMessagesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetMessagesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetMessagesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetMessagesOK creates a GetMessagesOK with default headers values
func NewGetMessagesOK() *GetMessagesOK {
	return &GetMessagesOK{}
}

/*GetMessagesOK handles this case with default header values.

Ok
*/
type GetMessagesOK struct {
	Payload *models.PagedMessages
}

func (o *GetMessagesOK) Error() string {
	return fmt.Sprintf("[GET /message][%d] getMessagesOK  %+v", 200, o.Payload)
}

func (o *GetMessagesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PagedMessages)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagesBadRequest creates a GetMessagesBadRequest with default headers values
func NewGetMessagesBadRequest() *GetMessagesBadRequest {
	return &GetMessagesBadRequest{}
}

/*GetMessagesBadRequest handles this case with default header values.

Bad Request
*/
type GetMessagesBadRequest struct {
	Payload *models.Error
}

func (o *GetMessagesBadRequest) Error() string {
	return fmt.Sprintf("[GET /message][%d] getMessagesBadRequest  %+v", 400, o.Payload)
}

func (o *GetMessagesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagesUnauthorized creates a GetMessagesUnauthorized with default headers values
func NewGetMessagesUnauthorized() *GetMessagesUnauthorized {
	return &GetMessagesUnauthorized{}
}

/*GetMessagesUnauthorized handles this case with default header values.

Unauthorized
*/
type GetMessagesUnauthorized struct {
	Payload *models.Error
}

func (o *GetMessagesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /message][%d] getMessagesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetMessagesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagesForbidden creates a GetMessagesForbidden with default headers values
func NewGetMessagesForbidden() *GetMessagesForbidden {
	return &GetMessagesForbidden{}
}

/*GetMessagesForbidden handles this case with default header values.

Forbidden
*/
type GetMessagesForbidden struct {
	Payload *models.Error
}

func (o *GetMessagesForbidden) Error() string {
	return fmt.Sprintf("[GET /message][%d] getMessagesForbidden  %+v", 403, o.Payload)
}

func (o *GetMessagesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
