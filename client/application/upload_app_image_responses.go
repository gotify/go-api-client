// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gotify/go-api-client/v2/models"
)

// UploadAppImageReader is a Reader for the UploadAppImage structure.
type UploadAppImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UploadAppImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUploadAppImageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUploadAppImageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUploadAppImageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUploadAppImageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUploadAppImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUploadAppImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUploadAppImageOK creates a UploadAppImageOK with default headers values
func NewUploadAppImageOK() *UploadAppImageOK {
	return &UploadAppImageOK{}
}

/*UploadAppImageOK handles this case with default header values.

Ok
*/
type UploadAppImageOK struct {
	Payload *models.Application
}

func (o *UploadAppImageOK) Error() string {
	return fmt.Sprintf("[POST /application/{id}/image][%d] uploadAppImageOK  %+v", 200, o.Payload)
}

func (o *UploadAppImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Application)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadAppImageBadRequest creates a UploadAppImageBadRequest with default headers values
func NewUploadAppImageBadRequest() *UploadAppImageBadRequest {
	return &UploadAppImageBadRequest{}
}

/*UploadAppImageBadRequest handles this case with default header values.

Bad Request
*/
type UploadAppImageBadRequest struct {
	Payload *models.Error
}

func (o *UploadAppImageBadRequest) Error() string {
	return fmt.Sprintf("[POST /application/{id}/image][%d] uploadAppImageBadRequest  %+v", 400, o.Payload)
}

func (o *UploadAppImageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadAppImageUnauthorized creates a UploadAppImageUnauthorized with default headers values
func NewUploadAppImageUnauthorized() *UploadAppImageUnauthorized {
	return &UploadAppImageUnauthorized{}
}

/*UploadAppImageUnauthorized handles this case with default header values.

Unauthorized
*/
type UploadAppImageUnauthorized struct {
	Payload *models.Error
}

func (o *UploadAppImageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /application/{id}/image][%d] uploadAppImageUnauthorized  %+v", 401, o.Payload)
}

func (o *UploadAppImageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadAppImageForbidden creates a UploadAppImageForbidden with default headers values
func NewUploadAppImageForbidden() *UploadAppImageForbidden {
	return &UploadAppImageForbidden{}
}

/*UploadAppImageForbidden handles this case with default header values.

Forbidden
*/
type UploadAppImageForbidden struct {
	Payload *models.Error
}

func (o *UploadAppImageForbidden) Error() string {
	return fmt.Sprintf("[POST /application/{id}/image][%d] uploadAppImageForbidden  %+v", 403, o.Payload)
}

func (o *UploadAppImageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadAppImageNotFound creates a UploadAppImageNotFound with default headers values
func NewUploadAppImageNotFound() *UploadAppImageNotFound {
	return &UploadAppImageNotFound{}
}

/*UploadAppImageNotFound handles this case with default header values.

Not Found
*/
type UploadAppImageNotFound struct {
	Payload *models.Error
}

func (o *UploadAppImageNotFound) Error() string {
	return fmt.Sprintf("[POST /application/{id}/image][%d] uploadAppImageNotFound  %+v", 404, o.Payload)
}

func (o *UploadAppImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUploadAppImageInternalServerError creates a UploadAppImageInternalServerError with default headers values
func NewUploadAppImageInternalServerError() *UploadAppImageInternalServerError {
	return &UploadAppImageInternalServerError{}
}

/*UploadAppImageInternalServerError handles this case with default header values.

Server Error
*/
type UploadAppImageInternalServerError struct {
	Payload *models.Error
}

func (o *UploadAppImageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /application/{id}/image][%d] uploadAppImageInternalServerError  %+v", 500, o.Payload)
}

func (o *UploadAppImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
