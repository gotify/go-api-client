// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/gotify/go-api-client/v2/models"
)

// UpdateCurrentUserReader is a Reader for the UpdateCurrentUser structure.
type UpdateCurrentUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCurrentUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateCurrentUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateCurrentUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateCurrentUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateCurrentUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateCurrentUserOK creates a UpdateCurrentUserOK with default headers values
func NewUpdateCurrentUserOK() *UpdateCurrentUserOK {
	return &UpdateCurrentUserOK{}
}

/*UpdateCurrentUserOK handles this case with default header values.

Ok
*/
type UpdateCurrentUserOK struct {
}

func (o *UpdateCurrentUserOK) Error() string {
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserOK ", 200)
}

func (o *UpdateCurrentUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCurrentUserBadRequest creates a UpdateCurrentUserBadRequest with default headers values
func NewUpdateCurrentUserBadRequest() *UpdateCurrentUserBadRequest {
	return &UpdateCurrentUserBadRequest{}
}

/*UpdateCurrentUserBadRequest handles this case with default header values.

Bad Request
*/
type UpdateCurrentUserBadRequest struct {
	Payload *models.Error
}

func (o *UpdateCurrentUserBadRequest) Error() string {
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateCurrentUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCurrentUserUnauthorized creates a UpdateCurrentUserUnauthorized with default headers values
func NewUpdateCurrentUserUnauthorized() *UpdateCurrentUserUnauthorized {
	return &UpdateCurrentUserUnauthorized{}
}

/*UpdateCurrentUserUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateCurrentUserUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateCurrentUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateCurrentUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCurrentUserForbidden creates a UpdateCurrentUserForbidden with default headers values
func NewUpdateCurrentUserForbidden() *UpdateCurrentUserForbidden {
	return &UpdateCurrentUserForbidden{}
}

/*UpdateCurrentUserForbidden handles this case with default header values.

Forbidden
*/
type UpdateCurrentUserForbidden struct {
	Payload *models.Error
}

func (o *UpdateCurrentUserForbidden) Error() string {
	return fmt.Sprintf("[POST /current/user/password][%d] updateCurrentUserForbidden  %+v", 403, o.Payload)
}

func (o *UpdateCurrentUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
